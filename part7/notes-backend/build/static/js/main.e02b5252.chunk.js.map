{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6NAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCU3B,EAfA,WAEb,OADgBK,IAAMC,IAHR,cAICC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCL5BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKb,UAAU,SAASa,I,4NCFjC,IAAMC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAyFSC,EAlFH,SAAAC,GAAU,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,iBAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,oBAAU,WACRC,IAAqB1B,KAAK,SAAA2B,GACxBT,EAASS,MAEV,IAEH,IAAMC,EAAqB,SAAAvB,GACzB,IAAMd,EAAO0B,EAAMY,KAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,IAChC0B,E,qVAAW,IAAQxC,EAAR,CAAcG,WAAYH,EAAKG,YAEhDgC,EACUrB,EAAI0B,GACX/B,KAAK,SAAAgC,GACJd,EAASD,EAAMgB,IAAI,SAAA1C,GAAI,OAAKA,EAAKc,KAAOA,EAAKd,EAAOyC,OAErDE,MAAM,SAAAC,GACLX,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGfwC,WAAW,WACTZ,EAAgB,OACf,KACHN,EAASD,EAAMoB,OAAO,SAAAP,GAAC,OAAIA,EAAEzB,KAAOA,QAsBpCiC,EAAcjB,EAAUJ,EAAQA,EAAMoB,OAAO,SAAA9C,GAAI,OAAIA,EAAKG,YAUhE,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAec,QAASe,IAExB,6BACE,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAnBFiB,EAAYL,IAAI,SAAA1C,GAAI,OAClB,kBAAC,EAAD,CACEgD,IAAKhD,EAAKc,GACVd,KAAMA,EACNC,iBAAkB,kBAAMoC,EAAmBrC,EAAKc,UAgBlD,0BAAMmC,SAxCM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG7BtB,EAAmBiB,GAAY3C,KAAK,SAAAgC,GAClCd,EAASD,EAAMgC,OAAOjB,IACtBZ,EAAW,QA+BT,2BAAO8B,MAAO/B,EAASgC,SA3BJ,SAAAV,GACvBrB,EAAWqB,EAAMW,OAAOF,UA2BpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,Q,MC9FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e02b5252.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./Note\";\r\nimport noteService from \"../services/notes\";\r\nimport Noteification from \"./Notification\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2019\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = props => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"a new note...\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then(initialNotes => {\r\n      setNotes(initialNotes);\r\n    });\r\n  }, []);\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const addNote = event => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5\r\n    };\r\n\r\n    noteService.create(noteObject).then(returnedNote => {\r\n      setNotes(notes.concat(returnedNote));\r\n      setNewNote(\"\");\r\n    });\r\n  };\r\n\r\n  const handleNoteChange = event => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n  const rows = () =>\r\n    notesToShow.map(note => (\r\n      <Note\r\n        key={note.id}\r\n        note={note}\r\n        toggleImportance={() => toggleImportanceOf(note.id)}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Noteification message={errorMessage} />\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? \"Important\" : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>{rows()}</ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"Submit\">Save</button>\r\n      </form>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}